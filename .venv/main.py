import socket
import json
import time

HOST = '127.0.0.1'
PORT = 5001

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind((HOST, PORT))
server.listen()

print(f"Listening on {HOST}:{PORT}")
conn, addr = server.accept()
print(f"Connected by {addr}")

try:
    # while True:
        received = conn.recv(1024).decode('utf-8').strip()
        print(received)
        if not received:
            # continue
            None
        if received == "readyToMoveBodyAutomate":
            time.sleep(3)
            data = json.dumps({"op": "forward" ,"mode": "AMR", "distance": 5.5, "id": 0}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate" ,"mode": "body", "distance": 180, "id": 1}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate" ,"mode": "body", "distance": 180, "id": 2}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate" ,"mode": "body", "distance": 180, "id": 3}).encode('utf-8')
            conn.sendall(data)
            time.sleep(3)
            data = json.dumps({"op": "rotate", "mode": "AMR", "distance": 90, "id": 0}).encode("utf-8")
            conn.send(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate" ,"mode": "body", "distance": -90, "id": 0}).encode('utf-8')
            conn.sendall(data)
            time.sleep(4.5)
            data = json.dumps({"op": "forward", "mode": "AMR", "distance": 1.5, "id": 0}).encode("utf-8")
            conn.send(data)
            time.sleep(2)
            data = json.dumps({"op": "rotate", "mode": "AMR", "distance": 90, "id": 0}).encode("utf-8")
            conn.send(data)
            time.sleep(5.5)
            data = json.dumps({"op": "forward", "mode": "AMR", "distance": 5.035, "id": 0}).encode("utf-8")
            conn.send(data)
            time.sleep(1)
            data = json.dumps({"op": "forward", "mode": "AMR", "distance": 5.5, "id": 5}).encode("utf-8")
            conn.send(data)
            time.sleep(5)
            data = json.dumps({"op": "rotate", "mode": "AMR", "distance": -90, "id": 0}).encode("utf-8")
            conn.send(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate", "mode": "AMR", "distance": 90, "id": 5}).encode("utf-8")
            conn.send(data)
            time.sleep(4.5)
            data = json.dumps({"op": "forward", "mode": "AMR", "distance": 0.45, "id": 0}).encode("utf-8")
            conn.send(data)
            time.sleep(1)
            data = json.dumps({"op": "forward", "mode": "AMR", "distance": 5.5, "id": 1}).encode("utf-8")
            conn.send(data)
            time.sleep(1)
            data = json.dumps({"op": "drop" ,"mode": "extender", "distance": 0.145, "id": 0}).encode('utf-8')
            conn.sendall(data)
            time.sleep(3)
            data = json.dumps({"op": "lift" ,"mode": "extender", "distance": 0.01, "id": 0}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate", "mode": "AMR", "distance": -90, "id": 0}).encode("utf-8")
            conn.send(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate", "mode": "body", "distance": 180, "id": 0}).encode("utf-8")
            conn.send(data)
            time.sleep(4)
            data = json.dumps({"op": "rotate", "mode": "AMR", "distance": 90, "id": 1}).encode("utf-8")
            conn.send(data)
            time.sleep(1)
            data = json.dumps({"op": "forward", "mode": "AMR", "distance": 5, "id": 0}).encode("utf-8")
            conn.send(data)
            time.sleep(4.5)
            data = json.dumps({"op": "release" ,"mode": "extender", "distance": 0, "id": 0}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "forward" ,"mode": "AMR", "distance": 2, "id": 1}).encode('utf-8')
            conn.sendall(data)
            time.sleep(3)
            data = json.dumps({"op": "rotate", "mode": "AMR", "distance": 90, "id": 1}).encode("utf-8")
            conn.send(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate", "mode": "body", "distance": 180, "id": 0}).encode("utf-8")
            conn.send(data)
            time.sleep(1)
            data = json.dumps({"op": "drop" ,"mode": "extender", "distance": 0.18, "id": 2}).encode('utf-8')
            conn.sendall(data)
            time.sleep(2.5)
            data = json.dumps({"op": "forward" ,"mode": "AMR", "distance": 5.035, "id": 1}).encode('utf-8')
            conn.sendall(data + b"\n")
            data = json.dumps({"op": "forward" ,"mode": "AMR", "distance": 3, "id": 5}).encode('utf-8')
            conn.sendall(data)
            time.sleep(5)
            data = json.dumps({"op": "rotate" ,"mode": "AMR", "distance": 90, "id": 5}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "lift" ,"mode": "extender", "distance": 0.12, "id": 2}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate", "mode": "AMR", "distance": -90, "id": 1}).encode("utf-8")
            conn.send(data)
            time.sleep(2)
            data = json.dumps({"op": "rotate" ,"mode": "body", "distance": 92, "id": 2}).encode('utf-8')
            conn.sendall(data)
            time.sleep(2.5)
            data = json.dumps({"op": "forward", "mode": "AMR", "distance": 0.85, "id": 1}).encode("utf-8")
            conn.sendall(data + b"\n")
            data = json.dumps({"op": "forward" ,"mode": "AMR", "distance": 5.035, "id": 5}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "drop" ,"mode": "extender", "distance": 0.145, "id": 0}).encode('utf-8')
            conn.sendall(data)
            time.sleep(3)
            data = json.dumps({"op": "lift" ,"mode": "extender", "distance": 0.01, "id": 0}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate", "mode": "AMR", "distance": -90, "id": 1}).encode("utf-8")
            conn.send(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate", "mode": "AMR", "distance": -90, "id": 5}).encode("utf-8")
            conn.send(data + b"\n")
            data = json.dumps({"op": "rotate", "mode": "body", "distance": 180, "id": 0}).encode("utf-8")
            conn.send(data)
            time.sleep(3)
            data = json.dumps({"op": "release" ,"mode": "extender", "distance": 0, "id": 2}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "lift" ,"mode": "extender", "distance": 0.01, "id": 2}).encode('utf-8')
            conn.sendall(data)
            time.sleep(2)
            # data = json.dumps({"op": "forward" ,"mode": "AMR", "distance": 1, "id": 3}).encode('utf-8')
            # conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "forward", "mode": "AMR", "distance": 4.6, "id": 1}).encode("utf-8")
            conn.send(data)
            time.sleep(1)
            data = json.dumps({"op": "forward", "mode": "AMR", "distance": 0.85, "id": 5}).encode("utf-8")
            conn.send(data)
            time.sleep(1.5)
            data = json.dumps({"op": "release" ,"mode": "extender", "distance": 0, "id": 0}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate" ,"mode": "body", "distance": 180, "id": 0}).encode('utf-8')
            conn.sendall(data + b"\n")
            data = json.dumps({"op": "rotate" ,"mode": "AMR", "distance": 90, "id": 3}).encode('utf-8')
            conn.sendall(data)
            time.sleep(4)
            data = json.dumps({"op": "drop" ,"mode": "extender", "distance": 0.18, "id": 1}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "forward" ,"mode": "AMR", "distance": 1, "id": 3}).encode('utf-8')
            conn.sendall(data)
            time.sleep(2.5)
            data = json.dumps({"op": "drop" ,"mode": "extender", "distance": 0.145, "id": 0}).encode('utf-8')
            conn.sendall(data + b"\n")
            data = json.dumps({"op": "lift" ,"mode": "extender", "distance": 0.12, "id": 1}).encode('utf-8')
            conn.sendall(data)
            time.sleep(2)
            data = json.dumps({"op": "rotate" ,"mode": "AMR", "distance": 90, "id": 3}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "lift" ,"mode": "extender", "distance": 0.01, "id": 0}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate" ,"mode": "AMR", "distance": -90, "id": 5}).encode('utf-8')
            conn.sendall(data + b"\n")
            data = json.dumps({"op": "rotate" ,"mode": "body", "distance": 180, "id": 0}).encode('utf-8')
            conn.sendall(data + b"\n")
            data = json.dumps({"op": "rotate" ,"mode": "body", "distance": 90, "id": 1}).encode('utf-8')
            conn.sendall(data)
            time.sleep(4.5)
            data = json.dumps({"op": "release" ,"mode": "extender", "distance": 0, "id": 1}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "forward" ,"mode": "AMR", "distance": 4.2, "id": 5}).encode('utf-8')
            conn.sendall(data + b"\n")
            data = json.dumps({"op": "lift" ,"mode": "extender", "distance": 0.01, "id": 1}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "forward" ,"mode": "AMR", "distance": 4, "id": 3}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate" ,"mode": "AMR", "distance": 90, "id": 2}).encode('utf-8')
            conn.sendall(data)
            time.sleep(4.5)
            data = json.dumps({"op": "release" ,"mode": "body", "distance": 0, "id": 0}).encode('utf-8')
            conn.sendall(data + b"\n")
            data = json.dumps({"op": "forward" ,"mode": "AMR", "distance": 1, "id": 2}).encode('utf-8')
            conn.sendall(data)
            time.sleep(2)
            data = json.dumps({"op": "rotate" ,"mode": "AMR", "distance": 90, "id": 2}).encode('utf-8')
            conn.sendall(data)
            time.sleep(4.5)
            data = json.dumps({"op": "forward" ,"mode": "AMR", "distance": 2.1, "id": 2}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "drop" ,"mode": "extender", "distance": 0.18, "id": 3}).encode('utf-8')
            conn.sendall(data)
            time.sleep(4.5)
            data = json.dumps({"op": "lift" ,"mode": "extender", "distance": 0.12, "id": 3}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate" ,"mode": "body", "distance": 92, "id": 3}).encode('utf-8')
            conn.sendall(data)
            time.sleep(5.5)
            data = json.dumps({"op": "release" ,"mode": "extender", "distance": 0, "id": 3}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "lift" ,"mode": "extender", "distance": 0.01, "id": 3}).encode('utf-8')
            conn.sendall(data + b"\n")
            data = json.dumps({"op": "rotate" ,"mode": "AMR", "distance": 90, "id": 4}).encode('utf-8')
            conn.sendall(data)
            time.sleep(1)
            data = json.dumps({"op": "rotate" ,"mode": "body", "distance": 88, "id": 3}).encode('utf-8')
            conn.sendall(data + b"\n")
            data = json.dumps({"op": "rotate" ,"mode": "body", "distance": 90, "id": 1}).encode('utf-8')
            conn.sendall(data + b"\n")
            data = json.dumps({"op": "rotate" ,"mode": "body", "distance": 88, "id": 2}).encode('utf-8')
            conn.sendall(data)
            time.sleep(4.5)
            data = json.dumps({"op": "forward" ,"mode": "AMR", "distance": 1, "id": 4}).encode('utf-8')
            conn.sendall(data)
            time.sleep(3.5)
            data = json.dumps({"op": "rotate" ,"mode": "AMR", "distance": 90, "id": 4}).encode('utf-8')
            conn.sendall(data)
            time.sleep(5.5)
            data = json.dumps({"op": "forward" ,"mode": "AMR", "distance": 3.79, "id": 4}).encode('utf-8')
            conn.sendall(data)

        if received == "readyToMoveBodyManually":
            while True:
                op = input("Enter the operation to perform(op): ").lower()
                if op not in ["rotate", "drop", "lift", "release"]:
                    print("Invalid operation entered.\n")
                    continue
                else:
                    mode = input("Enter the part to perform the operation on(mode): ").lower()
                    # Body has 1 operation - ["rotate"]
                    if op in ["rotate"] and mode in ["body"]:
                        None
                    # Extender has 3 operations - ["drop", "lift", "release"]
                    elif op in ["drop", "lift", "release"] and mode in ["extender"]:
                        None
                    else:
                        print(f"Part '{mode}' has no operation '{op}' yet.\n")
                        continue
                try:
                    distance = float(input("Enter the distance/angle to move/rotate(distance): "))
                except:
                    print("Invalid number entered.\n")
                    continue
                data = json.dumps({"op": op ,"mode": mode, "distance": distance}).encode('utf-8')
                conn.sendall(data + b"\n")
                print("Transmitted!\n")
                    
            
except KeyboardInterrupt:
    print("Closing server")
finally:
    conn.close()
    server.close()
